import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import reportWebVitals from './reportWebVitals';
import App from './app/App';
import {Provider} from 'react-redux';
import {store} from './app/store';


const root = ReactDOM.createRoot(
    document.getElementById('root') as HTMLElement
);

root.render(
    <Provider store={store}>
        <App/>
    </Provider>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

//++++++++
// import React from "react";
// import ReactDOM from "react-dom/client";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import axios, { AxiosError } from "axios";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Types
// type PhotoType = {
//     albumId: string;
//     id: string;
//     title: string;
//     url: string;
// };
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });
//
// const photosAPI = {
//     getPhotos() {
//         return instance.get<PhotoType[]>("pictures?delay=3");
//     },
// };
//
// // Reducer
// const initState = {
//     isLoading: false,
//     error: null as string | null,
//     photos: [] as PhotoType[],
// };
//
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "PHOTO/GET-PHOTOS":
//             return { ...state, photos: action.photos };
//         case "PHOTO/IS-LOADING":
//             return { ...state, isLoading: action.isLoading };
//         case "PHOTO/SET-ERROR":
//             return { ...state, error: action.error };
//         default:
//             return state;
//     }
// };
//
// const getPhotosAC = (photos: PhotoType[]) => ({ type: "PHOTO/GET-PHOTOS", photos }) as const;
// const setLoadingAC = (isLoading: boolean) => ({ type: "PHOTO/IS-LOADING", isLoading }) as const;
// const setError = (error: string | null) => ({ type: "PHOTO/SET-ERROR", error }) as const;
// type ActionsType =
//     | ReturnType<typeof getPhotosAC>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setError>;
//
// const getPhotosTC = (): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true));
//     photosAPI
//         .getPhotos()
//         .then((res) => {
//             dispatch(getPhotosAC(res.data));
//            // dispatch(setLoadingAC(false))
//         })
//         .catch((e: AxiosError) => {
//             dispatch(setError(e.message));
//            // dispatch(setLoadingAC(false))
//
//         }).then(()=>{
//         dispatch(setLoadingAC(false));
//     });
// };
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // Loader
// export const Loader = () => {
//     return <h1>Loading ...</h1>;
// };
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch();
//
//     const photos = useAppSelector((state) => state.app.photos);
//     const isLoading = useAppSelector((state) => state.app.isLoading);
//     const error = useAppSelector((state) => state.app.error);
//
//     const getPhotosHandler = () => {
//         dispatch(getPhotosTC());
//     };
//
//     return (
//         <>
//             <h1>üì∏ –§–æ—Ç–æ</h1>
//             <h2 style={{ color: "red" }}>{!!error && error}</h2>
//             {isLoading && <Loader />}
//             <button onClick={getPhotosHandler}>–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</button>
//             <div style={{ display: "flex", gap: "20px", margin: "20px" }}>
//                 {photos.map((p) => {
//                     return (
//                         <div key={p.id}>
//                             <b>title</b>: {p.title}
//                             <div>
//                                 <img src={p.url} alt="" />
//                             </div>
//                         </div>
//                     );
//                 })}
//             </div>
//         </>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <App />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" –ø–æ—è–≤–ª—è–µ—Ç—Å—è Loading... –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–ø—Ä—è—Ç–∞—Ç—å Loader –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
// –¢.–µ. –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —É—Å–ø–µ—à–Ω—ã–π - Loader —É–±–∏—Ä–∞–µ–º
//      –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —Å –æ—à–∏–±–∫–æ–π - Loader —Ç–æ–∂–µ —É–±–∏—Ä–∞–µ–º.
// –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: .then(() =>  dispatch(getPhotosAC(res.data)))

//++++++++++++++++++++++++++++++??
//
// import React, { useEffect } from "react";
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import axios, { AxiosError } from "axios";
// import { configureStore, combineReducers, Dispatch } from "@reduxjs/toolkit";
//
// // TYPES
// type TodoType = {
//     id: string;
//     title: string;
//     order: number;
//     createdAt: string;
//     updatedAt: string;
//     completed: boolean;
// };
//
// type UserType = {
//     id: string;
//     name: string;
//     age: number;
// };
//
// type UsersResponseType = {
//     items: UserType[];
//     totalCount: number;
// };
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });
//
// const api = {
//     getTodos() {
//         return instance.get<TodoType[]>("todo");
//     },
//     getUsers() {
//         return instance.get<UsersResponseType>("user");
//     },
// };
//
// // Reducer
// const initState = {
//     isLoading: false,
//     error: null as string | null,
//     todos: [] as TodoType[],
//     users: [] as UserType[],
// };
//
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "APP/GET-TODOS":
//             return { ...state, todos: action.todos };
//         case "APP/GET-USERS":
//             return { ...state, users: action.users };
//         case "APP/IS-LOADING":
//             return { ...state, isLoading: action.isLoading };
//         case "APP/SET-ERROR":
//             return { ...state, error: action.error };
//         default:
//             return state;
//     }
// };
//
// const getUsersAC = (users: UserType[]) => ({ type: "APP/GET-USERS", users }) as const;
// const getTodosAC = (todos: TodoType[]) => ({ type: "APP/GET-TODOS", todos }) as const;
// const setLoadingAC = (isLoading: boolean) => ({ type: "APP/IS-LOADING", isLoading }) as const;
// const setError = (error: string | null) => ({ type: "APP/SET-ERROR", error }) as const;
//
// type ActionsType =
//     | ReturnType<typeof getUsersAC>
//     | ReturnType<typeof getTodosAC>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setError>;
//
// // Utils functions
// function baseErrorHandler(dispatch: Dispatch, message: string) {
//     dispatch(setError(message));
//     dispatch(setLoadingAC(false));
// }
//
// // Thunk
// const getTodosTC = (): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true));
//     api
//         .getTodos()
//         .then((res) => {
//             dispatch(getTodosAC(res.data));
//             dispatch(setLoadingAC(false));
//         })
//         .catch((e: AxiosError) => {
//             console.log(e)
//            baseErrorHandler(dispatch,e.message)
//         });
// };
//
// const getUsersTC = (): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true));
//     api
//         .getUsers()
//         .then((res) => {
//             dispatch(getUsersAC(res.data.items));
//             dispatch(setLoadingAC(false));
//         })
//         .catch((e: AxiosError) => {
//             // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
//         });
// };
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // COMPONENTS
// // Loader
// export const Loader = () => {
//     return <h1>Loading ...</h1>;
// };
//
// const App = () => {
//     return (
//         <>
//             <h1>‚úÖTodos & üôÇUsers</h1>
//             <div style={{ display: "flex", justifyContent: "space-evenly" }}>
//                 <Todos />
//                 <Users />
//             </div>
//         </>
//     );
// };
//
// const Todos = () => {
//     const dispatch = useAppDispatch();
//     const todos = useAppSelector((state) => state.app.todos);
//     const error = useAppSelector((state) => state.app.error);
//     const isLoading = useAppSelector((state) => state.app.isLoading);
//
//     useEffect(() => {
//         dispatch(getTodosTC());
//     }, []);
//
//     return (
//         <div>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//             {isLoading && <Loader />}
//             {todos.map((t) => {
//                 return (
//                     <div style={t.completed ? { color: "grey" } : {}} key={t.id}>
//                         <input type="checkbox" checked={t.completed} />
//                         <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
//                     </div>
//                 );
//             })}
//         </div>
//     );
// };
//
// const Users = () => {
//     const dispatch = useAppDispatch();
//     const users = useAppSelector((state) => state.app.users);
//     const error = useAppSelector((state) => state.app.error);
//     const isLoading = useAppSelector((state) => state.app.isLoading);
//
//     useEffect(() => {
//         dispatch(getUsersTC());
//     }, []);
//
//     return (
//         <div>
//             <h2>üôÇ –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤</h2>
//             {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//             {isLoading && <Loader />}
//             <div>
//                 {users.map((u) => {
//                     return (
//                         <div key={u.id}>
//                             <b>name</b>:{u.name} - <b>age</b>:{u.age}
//                         </div>
//                     );
//                 })}
//             </div>
//         </div>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <App />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ.
// –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –ø–∞–¥–∞—é—Ç —Å –æ—à–∏–±–∫–∞–º–∏,
// –Ω–æ –≤ –∫–æ–¥–µ —ç—Ç–æ—Ç –Ω–∏–∫–∞–∫ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.
// –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞–ø–∏—Å–∞–Ω–∞ —É—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è baseErrorHandler.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∏ –≤—ã–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ö —É–≤–∏–¥–µ–ª ?
//‚ùó –ö–æ–¥ —Ñ–∏–∫—Å–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.


//+++++++++++++++++++++++++++++
//
// import React, { useEffect } from "react";
// import ReactDOM from "react-dom/client";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import axios, { AxiosError } from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Types
// type CommentType = {
//     postId: string;
//     id: string;
//     name: string;
//     email: string;
//     body: string;
// };
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/"});
//
// export const commentsAPI = {
//     getComments() {
//         return instance.get<CommentType[]>("comments");
//     },
// };
//
// // Reducer
// const initState = {
//     comments: [] as CommentType[],
// };
//
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType) => {
//     switch (action.type) {
//         case "COMMENTS/GET-COMMENTS":
//             return { ...state, comments: action.comments };
//
//         default:
//             return state;
//     }
// };
//
// const getCommentsAC = (comments: CommentType[]) =>
//     ({ type: "COMMENTS/GET-COMMENTS", comments }) as const;
// type ActionsType = ReturnType<typeof getCommentsAC>;
//
// // Thunk
// const getCommentsTC = (): AppThunk => (dispatch) => {
//     commentsAPI.getComments().then((res) => {
//             console.log(res.data)
//             dispatch(getCommentsAC(res.data));
//         })
//         .catch((e: AxiosError) => {
//             console.log(e)
//             // alert(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${e.message}`);
//         });
// };
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // Components
// export const App = () => {
//     const comments = useAppSelector((state) => state.app.comments);
//     const dispatch = useAppDispatch();
//     useEffect(() => {
//         dispatch(getCommentsTC());
//     }, []);
//
//     return (
//         <>
//             <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
//             {comments.length ? (
//                 comments.map((c) => {
//                     return (
//                         <div key={c.id}>
//                             <b>Comment</b>: {c.body}{" "}
//                         </div>
//                     );
//                 })
//             ) : (
//                 <h3>‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ù–∞–π–¥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –µ–µ</h3>
//             )}
//         </>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <App />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// ‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.
// –í –¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫—É –∏ –ø–æ—á–∏–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
// –ï—Å–ª–∏ —Å–¥–µ–ª–∞–µ—Ç–µ –≤—Å–µ –≤–µ—Ä–Ω–æ, —Ç–æ —É–≤–∏–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∑–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const store = createStore(rootReducer, applyMiddleware(thunk))
